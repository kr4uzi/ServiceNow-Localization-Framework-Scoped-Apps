<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_376096_lfp_apps.MetadataLocalizationProcessor</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>Script that is used while translating and saving any ServiceNow Metadata Record (=Application File). Some field-types are supported by the ootb Localization Framework (LF) implementation. If a translation for those fields is requested, this Script Include does a simple passthrough.&#13;
&#13;
The following field types are handled by this script include:&#13;
- Documentation (sys_documentation): used for Table and Column Labels&#13;
- Translated {Text|HTML} (sys_translated_text): translations which are bound to a specific record - implemented via passthrough&#13;
- Translated Field (sys_translated): translations with system-wide effect (table + field specific) - implemented via passthrough&#13;
- HTML Template (html_template): used e.g. in Service Portal Widgets with inline translations like ${message_key}&#13;
- Translated JSON (json_translations): used in UI Builder Workspaces (those fields contain actually only a list of sys_ui_message keys)&#13;
&#13;
In addition, there are several records which are Application Files themselves but are composed of non-Application File records:&#13;
- UI Sections: Section Captions and Annotations&#13;
- Choice Set: Choices (with dependent value)&#13;
- Tables and Columns: The label for tables doesn't actually reside on table/column record and needs special handling</description>
        <mobile_callable>false</mobile_callable>
        <name>MetadataLocalizationProcessor</name>
        <sandbox_callable>false</sandbox_callable>
        <script><![CDATA[/* global gs, global, sn_scoped_cache, x_376096_lfp_apps */
/* global Class, GlideAggregate, GlideRecord, GlideTableHierarchy, GlideScriptedExtensionPoint, Set */
/* eslint no-undef: "error" */
var MetadataLocalizationProcessor = Class.create();
MetadataLocalizationProcessor.prototype = Object.extendsObject(global.LFArtifactProcessorSNC, {
	initialize: function () {
		global.LFArtifactProcessorSNC.prototype.initialize.apply(this, arguments);
		
		const metadataExts = new GlideScriptedExtensionPoint().getExtensions('LFPMetadataExt');
		if (metadataExts.length) {
			for (let i = 0; i < metadataExts.length; i++) {
				metadataExts[i].initialize();
			}

			this.metadataExts = metadataExts;
		} else {
			throw new Error(this.type + ' requires a "LFPMetadataExt" implementation');
		}

		const docExts = new GlideScriptedExtensionPoint().getExtensions('LFPDocumentationExt');
		if (docExts.length) {
			docExts[0].initialize();
			this.docExt = docExts[0];
		} else {
			throw new Error(this.type + ' requires a "LFPDocumentationExt" implementation');
		}

		const choiceExts = new GlideScriptedExtensionPoint().getExtensions('LFPChoiceExt');
		if (choiceExts.length) {
			choiceExts[0].initialize();
			this.choiceExt = choiceExts[0];
		} else {
			throw new Error(this.type + ' requires a "LFPChoiceExt" implementation');
		}

		// tables with labels (documentation_field) need to be treated differently from all other translated fields
		// as they depend on the whole record (in contrast every other tranlated field depends on the 
		// record and field)
		this.metadataHandlers = {
			'sys_ui_section': this._processUISection,
			'sys_choice_set': this._processChoiceSet,
			'sys_db_object': this._processDocumentation
		};

		new GlideTableHierarchy('sys_dictionary').getAllExtensions().forEach(dictTable => {
			this.metadataHandlers[dictTable] = this._processDocumentation;
		});

		// the 'Additional options, JSON format' (widget_parameters) has type script_server,
		// but can contain inline translations
		new GlideTableHierarchy('sp_instance').getAllExtensions().forEach(dictTable => {
			this.metadataHandlers[dictTable] = this._processWidgetInstance;
		});
	},
	
	showTranslateUIAction: function (recordGr) {
		const recordTable = recordGr.getRecordClassName();
		if (new global.LFUtils().showUIAction('lfp_apps_metadata')
			/*&& (this._getTranslatableFields(recordTable).length > 0 || recordTable == 'sys_choice_set')*/) {
			// only show the translate ui action if no other 'Edit Translations' UI Action exists for the record's table
			if (!checkUIActionExists(recordTable, 'Edit Translations')) {
				return hasTranslatableContent.call(this, recordGr);
			}
		}
		
		return false;

		function checkUIActionExists(recordTable, uiActionName) {
			const metadataEditTranslationsUIAction = '08d5d8ffc3560610754fbfddd4013158';
			const uiActionGr = new GlideRecord('sys_ui_action');
			uiActionGr.addQuery('sys_id', '!=', metadataEditTranslationsUIAction);
			uiActionGr.addQuery('active', true);
			uiActionGr.addQuery('name', uiActionName);
			uiActionGr.addQuery('table', 'IN', new GlideTableHierarchy(recordTable).getTables());
			uiActionGr.setLimit(1);
			uiActionGr.query();
			return uiActionGr.hasNext();
		}

		function hasTranslatableContent(anyGr) {
			const params = {
				language: 'en',
				sourceLanguage: 'en',
				tableName: anyGr.getRecordClassName(),
				sysId: anyGr.getUniqueValue()
			};

			try {
				return this.getTranslatableContent(params).getElements().length > 0;
			} catch (e) {
				gs.error('[LF+ Scoped Apps] Failed to parse file: ' + anyGr.getRecordClassName() + '/' + anyGr.getUniqueValue() + '\n' + e.stack);
			}

			return false;
		}
	},

    getTranslatableContent: function(params) {
		const builder = new global.LFDocumentContentBuilder('v1', params.language, params.sysId, params.tableName, params);
		const ext = this._metadataExtForTable(params.tableName);
		if (!ext) {
			gs.error('LF+ Scoped Apps: No Extension Point for handling "' + params.tableName + '" found!');
			return builder.build();
		}

		// Note: Not accessing the record's table is intentional to avoid creating cross scope privileges
		const recordGr = new GlideRecord('sys_metadata');
		recordGr.addQuery('sys_id', params.sysId);
		recordGr.setLimit(1);
		recordGr.query();
		if (!recordGr.next()) {
			return builder.build();
		}

		const displayValue = recordGr.getClassDisplayValue() + ': ' + (recordGr.getDisplayValue() || params.sysId);

		const scriptFields = this._getScriptFields(params.tableName);
		const htmlFields = this._getHTMLFields(params.tableName);
		const translatedJSONFields = this._getTranslatedJSONFields(params.tableName);
		const uxFields = this._getUXFields(params.tableName);
		const fields = scriptFields.map(f => f.name)
			.concat(htmlFields.map(f => f.name))
			.concat(translatedJSONFields.map(f => f.name))
			.concat(uxFields.map(f => f.name));

		builder.processTranslatableFieldsForMultipleRecords(params.tableName, 'sys_id=' + params.sysId, displayValue, params);
		const data = ext.getFieldValues(params.tableName, recordGr.getUniqueValue(), fields);
		if (data) {
			scriptFields.forEach(f => builder.processScript(data[f.name], displayValue, f.label, params));
			htmlFields.forEach(f => {
				const messages = this._processHTML(data[f.name]);
				builder.processStringArray(messages, displayValue, f.label, params);
			});
			translatedJSONFields.forEach(f => {
				try {
					const messages = new Set();
					JSON.parse(data[f.name]).forEach(jsonField => {
						if (jsonField.message) messages.add(jsonField.message);
					});
					builder.processStringArray([...messages], displayValue, f.label, params);
				} catch (e) {

				}
			});
			uxFields.forEach(f => this._processUX(builder, data[f.name], displayValue, f.label, params));
		}

		this.metadataHandlers[params.tableName]?.call(this, builder, recordGr, displayValue, params, data);

		const uiMessageKeys = new Set();
		const result = new global.LFDocumentContentBuilder('v1', params.language, params.sysId, params.tableName, params);
		builder.build().getElements().forEach(element => {
			const fields = element.getFields().filter(field => {
				const params = field.getAdditionalParameters() || {};
				if (params.hasOwnProperty('type')) {
					// if not a UI Message: remove empty fields
					return !!field.getOriginalValue();
				}

				// remove duplicate UI messages
				const key = params.key || field.getOriginalValue();
				if (uiMessageKeys.has(key)) {
					return false;
				}
				
				uiMessageKeys.add(key);
				return true;		
			});

			element.setFields(fields);
			if (fields.length > 0) {
				result.processElement(element);
			}
		});

		// cross_scope_handler UI Script will show cross scope violations
		this._checkCrossScopeViolations(builder, recordGr.getValue('sys_scope'));

		return result.build();
	},

	_checkCrossScopeViolations: function (builder, expectedScope) {
		builder.build().getElements().forEach(element => {
			element.getFields().forEach(field => {
				const originalValue = field.getOriginalValue();
				const params = field.getAdditionalParameters() || {};

				// Note: translated_text and translated_html are not checked as those fields are
				// bound directly to the record and therefore cannot cause a cross scope violation
				if (params.type == 'translated_field') {
					const translatedGr = new GlideRecord('sys_translated');
					translatedGr.addQuery('name', params.table);
					translatedGr.addQuery('element', params.name);
					translatedGr.addQuery('value', originalValue);
					translatedGr.addQuery('language', builder.targetLanguage);
					translatedGr.setLimit(1);
					translatedGr.query();
					params.lfp_apps_cross_scope_violated = translatedGr.next() && translatedGr.getValue('sys_scope') != expectedScope && (translatedGr.getDisplayValue('sys_scope') || '(empty scope)');
				} else if (params.type == 'lfp_choice') {
					const choiceSetGr = new GlideRecord('sys_choice_set');
					choiceSetGr.addQuery('sys_id', params.sysId);
					choiceSetGr.setLimit(1);
					choiceSetGr.query();
					params.lfp_apps_cross_scope_violated = choiceSetGr.next() && choiceSetGr.getValue('sys_scope') != expectedScope && (choiceSetGr.getDisplayValue('sys_scope') || '(empty scope)');
				} else if (params.type == 'lfp_documentation_field') {
					const sourceDocGr = new GlideRecord('sys_documentation');
					sourceDocGr.addQuery('sys_id', params.sysId);
					sourceDocGr.setLimit(1);
					sourceDocGr.query();
					if (sourceDocGr.next()) {
						const targetDocGr = new GlideRecord('sys_documentation');
						targetDocGr.addQuery('name', sourceDocGr.name);
						targetDocGr.addQuery('element', sourceDocGr.element);
						targetDocGr.addQuery('language', builder.targetLanguage);
						targetDocGr.setLimit(1);
						params.lfp_apps_cross_scope_violated = targetDocGr.next() && targetDocGr.getValue('sys_scope') != expectedScope && (targetDocGr.getDisplayValue('sys_scope') || '(empty scope)');	
					}
				} else if (!params.type) {
					const uiMessageGr = new GlideRecord('sys_ui_message');
					uiMessageGr.addQuery('key', params.key || originalValue);
					uiMessageGr.setLimit(1);
					uiMessageGr.query();
					params.lfp_apps_cross_scope_violated = uiMessageGr.next() && uiMessageGr.getValue('sys_scope') != expectedScope && (uiMessageGr.getDisplayValue('sys_scope') || '(empty scope)');
				}

				field.setAdditionalParameters(params);
			});
		});
	},

	saveTranslatedContent: function (documentContentObject) {
		global.LFArtifactProcessorSNC.prototype.saveTranslatedContent.apply(this, arguments);
		
		// the default save function is currently not handling sys_documentation fields at all...
		// the script below is based on LFReadSaveScriptUtils::saveTranslationsInStandardTables
		const targetLanguage = documentContentObject.getLanguage();
        const version = documentContentObject.getVersion();
        if (version == 'v1' && targetLanguage) {
			const elements = documentContentObject.getElements();
			const docFields = {};
			const choiceFields = {};
            for (let i = 0; i < elements.length; i++) {
				const fields = elements[i].getFields();
				for (let j = 0; j < fields.length; j++) {
					const field = fields[j];
					const fieldParams = field.getAdditionalParameters() || {};
					if (fieldParams.type == 'lfp_documentation_field' && fieldParams.sysId && fieldParams.element) {
						docFields[fieldParams.sysId] ??= {};
						docFields[fieldParams.sysId][fieldParams.element] = field.getTranslatedValue();
					} else if (fieldParams.type == 'lfp_choice' && fieldParams.sysId
						&& fieldParams.hasOwnProperty('dependent') && fieldParams.value
						&& fieldParams.hasOwnProperty('field')) {
						choiceFields[fieldParams.sysId] ??= {};
						choiceFields[fieldParams.sysId][fieldParams.dependent] ??= {};
						choiceFields[fieldParams.sysId][fieldParams.dependent][fieldParams.value] ??= {};
						choiceFields[fieldParams.sysId][fieldParams.dependent][fieldParams.value][fieldParams.field] = field.getTranslatedValue();
					}
				}
            }

			const updateSetManager = new global.LFUpdateSetManager(this.publishMode, this.updateSetSuffix);
			const docGr = new GlideRecord('sys_documentation');
			docGr.addQuery('sys_id', 'IN', Object.keys(docFields));
			docGr.query();
			while (docGr.next()) {
				updateSetManager.switchToUpdateSetInScope(docGr.getValue('sys_scope'));
				this.docExt.createOrUpdateDocumention(docGr.getValue('name'), docGr.getValue('element'), targetLanguage, docFields[docGr.getUniqueValue()]);
				updateSetManager.switchToPreviousUpdateSet();
			}

			for (const choiceSetSysID in choiceFields) {
				const choiceSetGr = new GlideRecord('sys_choice_set');
				choiceSetGr.addQuery('sys_id', choiceSetSysID);
				choiceSetGr.setLimit(1);
				choiceSetGr.query();
				if (choiceSetGr.next()) {
					const table = choiceSetGr.getValue('name');
					const element = choiceSetGr.getValue('element');
					updateSetManager.switchToUpdateSetInScope(choiceSetGr.getValue('sys_scope'));
					for (const dependentValue in choiceFields[choiceSetSysID]) {
						for (const value in choiceFields[choiceSetSysID][dependentValue]) {
							this.choiceExt.createOrUpdateChoice(table, element, dependentValue, value, targetLanguage, choiceFields[choiceSetSysID][dependentValue][value]);
						}
					}
					updateSetManager.switchToPreviousUpdateSet();
				}
			}
        }
	},

	_processDocumentation: function (builder, metadataGr, group, params, data) {
		// isTable condition is based on 'sys_db_object' as it has no extending tables (sys_dictionary has!)
		const isTable = metadataGr.getRecordClassName() == 'sys_db_object';
		const recordGr = new GlideRecord(isTable ? 'sys_db_object' : 'sys_dictionary');
		recordGr.addQuery('sys_id', metadataGr.sys_id);
		recordGr.setLimit(1);
		recordGr.query();
		if (recordGr.next()) {
			const optionalFields = ['help', 'hint', 'url', 'url_target'];
			const fields = ['label', 'plural'].concat(optionalFields);
			const translatedValues = {};
			const docGr = new GlideRecord('sys_documentation');
			docGr.addQuery('name', recordGr.getValue('name'));
			docGr.addQuery('element', recordGr.getValue('element'));
			docGr.addQuery('language', builder.sourceLanguage)
				.addOrCondition('language', builder.targetLanguage);
			docGr.setLimit(2);
			docGr.query();
			while (docGr.next()) {
				const language = docGr.getValue('language');
				translatedValues[language] = {
					sys_id: docGr.getUniqueValue(),
					label: docGr.getValue('label'),
					plural: docGr.getValue('plural')
				};

				optionalFields.forEach(field => {
					const fieldValue = docGr.getValue(field);
					if (fieldValue) {
						translatedValues[language][field] = fieldValue;
					}
				});
			}

			const source = translatedValues[builder.sourceLanguage];
			if (!source) {
				// no documentation record exists, this regularly happens for ui-builder components,
				// but I still have to figure out under what exact circumstances
				return;
			}

			const target = translatedValues[builder.targetLanguage];

			// For custom tables, the sys-columns are created without a sys_name (display column for sys_metadata).
			// For these columns, the group name (which is based on the metadata's display value) is thereforce incorrect.
			let elementName = `${recordGr.getClassDisplayValue()}: ${recordGr.getDisplayValue()} (${recordGr.name}`;
			if (recordGr.element) {
				elementName += `.${recordGr.element}`;
			}
			elementName += ')';

			fields.forEach(field => {
				if (!source.hasOwnProperty(field)) {
					// ignore fields (e.g. url and url_target) if they are not present
					return;
				}

				const additionalParameters = {
					'sysId': source.sys_id,
					'type': 'lfp_documentation_field',
					'element': field
				};
				
				builder.processElement(
					global.LFDocumentContentHelper.createElement(elementName, docGr.getElement(field).getLabel())
					.addField(global.LFDocumentContentHelper
						.createField(source[field], (target && target[field]) || '')
						.setAdditionalParameters(additionalParameters)
						.setTextType(global.LFDocumentContentHelper.PLAIN_TEXT_TYPE)
					)
				);
			});
		}
	},

	_processChoiceSet: function (builder, metadataGr, group, params, data) {
		// TOOD: We need special handling for "javascript:" values here
		// e.g. several NULL_OVERRIDE values make use of this
		const choiceSetGr = new GlideRecord('sys_choice_set');
		choiceSetGr.addQuery('sys_id', metadataGr.getUniqueValue());
		choiceSetGr.setLimit(1);
		choiceSetGr.query();
		if (choiceSetGr.next()) {
			const table = choiceSetGr.getValue('name');
			const element = choiceSetGr.getValue('element');

			getDependentValues(table, element, [builder.sourceLanguage, builder.targetLanguage]).forEach(dependent => {
				const choiceGr = new GlideRecord('sys_choice');
				choiceGr.addQuery('name', table);
				choiceGr.addQuery('element', element);
				choiceGr.addQuery('inactive', false);
				choiceGr.addQuery('dependent_value', dependent);
				choiceGr.addQuery('language', builder.sourceLanguage)
					.addOrCondition('language', builder.targetLanguage);
				choiceGr.query();

				const choices = {};
				while (choiceGr.next()) {
					// Note: values need to be treated case-insensitive
					const value = choiceGr.value.toString().toLowerCase();
					choices[value] ??= {};
					choices[value][choiceGr.language.toString()] = {
						label: choiceGr.label.toString(),
						hint: choiceGr.hint.toString()
					};
				}

				for (const value in choices) {
					const labelParams = {
						'sysId': choiceSetGr.getUniqueValue(),
						'type': 'lfp_choice',
						'dependent': dependent,
						'field': 'label',
						'value': value
					};

					const source = choices[value][builder.sourceLanguage];
					if (!source) {
						gs.error(`[LF+ Scoped Apps] The value '${value}' is not available in ${builder.sourceLanguage} - this is typically caused by an inconsistent implementation`);
						continue;
					}

					const target = choices[value][builder.targetLanguage];
					// because every choice has a label and an additional hint, we need to create separate groups for each
					let elementGroup = `${group} (${value}`;
					if (dependent) {
						elementGroup += `[${dependent}]`;
					}
					elementGroup += `)`;

					builder.processElement(
						global.LFDocumentContentHelper.createElement(elementGroup, 'Label')
						.addField(global.LFDocumentContentHelper
							.createField(source.label, target?.label || '')
							.setAdditionalParameters(labelParams)
							.setTextType(global.LFDocumentContentHelper.PLAIN_TEXT_TYPE)
						)
					);

					if (source.hint) {
						const hintParams = JSON.parse(JSON.stringify(labelParams));
						hintParams.field = 'hint';

						builder.processElement(
							global.LFDocumentContentHelper.createElement(elementGroup, 'Hint')
							.addField(global.LFDocumentContentHelper
								.createField(source.hint, target?.hint || '')
								.setAdditionalParameters(hintParams)
								.setTextType(global.LFDocumentContentHelper.PLAIN_TEXT_TYPE)
							)
						);
					}
				}
			});
		}

		function getDependentValues(table, field, languages) {
			const choiceGa = new GlideAggregate('sys_choice');
			choiceGa.addQuery('name', table);
			choiceGa.addQuery('element', field);
			choiceGa.addQuery('inactive', false);
			const qc = choiceGa.addQuery('language', languages[0]);
			languages.slice(1).forEach(l => qc.addOrCondition('language', l));
			
			choiceGa.groupBy('dependent_value');
			choiceGa.query();

			const dependendValues = [];
			while (choiceGa.next()) {
				dependendValues.push(choiceGa.getValue('dependent_value'));
			}

			return dependendValues;
		}
	},

	_processUX: function (builder, value, group, label, params) {
		try {
			const messages = new Set();
			parseObj(messages, JSON.parse(JSON.stringify(JSON.parse(value), null, 2)));
			builder.processStringArray(messages, group, label, params);
		} catch (e) {

		}

		function parseObj(keys, obj) {
			if (obj && typeof obj == 'object') {
				if (obj instanceof Array) {
					obj.forEach(element => parseObj(keys, element));
				} else if (obj.hasOwnProperty('type') && obj.hasOwnProperty('value')) {
					if (obj['type'] == 'TRANSLATION_LITERAL') {
						const value = obj['value'];
						if (value.message) keys.add(value.message);
					}
				} else {
					for (let key in obj) {
						parseObj(keys, obj[key]);
					}
				}
			}
		}
	},

	_processUISection: function (builder, metadataGr, group, params, data) {
		const annotationSysIDs = [];
		const uiElementGr = new GlideRecord('sys_ui_element');
		uiElementGr.addQuery('type', 'annotation');
		uiElementGr.addQuery('sys_ui_section', metadataGr.getUniqueValue());
		uiElementGr.query();
		while (uiElementGr.next()) {
			annotationSysIDs.push(uiElementGr.getValue('element'));
		}

		const annotationGr = new GlideRecord('sys_ui_annotation');
		annotationGr.addQuery('sys_id', 'IN', annotationSysIDs);			
		annotationGr.query();
		while (annotationGr.next()) {
			const text = annotationGr.text.toString();
			if (text.includes('${')) {
				// annotation is taking care of the translations itself
				builder.processScript(text, group, 'Annotation', params);
			} else {
				const originalValue = builder._getOriginalMessage(text);
				const translatedValue = builder._getTranslatedValueFromStandardTables(text);
				const additionalParameters = {};
				if (text != originalValue) {
					additionalParameters['key'] = text;
				}

				const scope = builder._getScope(params);
				if (scope) {
					additionalParameters['scope'] = scope;
				}

				const element = global.LFDocumentContentHelper.createElement(group, 'Annotation');
				element.addField(
					global.LFDocumentContentHelper
						.createField(originalValue, translatedValue)
						.setAdditionalParameters(additionalParameters)
				);
				builder.processElement(element);
			}
		}
	},

	_processWidgetInstance: function (builder, metadataGr, group, params, data) {
		// widget_parameters are of type server_script and as such should already be contained in data
		// they do not contain a script however, instead a json with inline html
		const messages = this._processHTML(data?.widget_parameters);
		if (messages.length) {
			const fields = this._getTranslatableFields(params.tableName);
			const label = fields.find(f => f.name == 'widget_parameters')?.label || 'Additional options, JSON format';
			builder.processStringArray(messages, group, label, params);
		}
	},

	_processHTML: function (html) {
		html = html || '';

		// in-place translations for ${ MESSAGE {{DATA-BINDING}} } html 
		let i = html.indexOf('${');
		let pcount = 0;
		let start = 0;
		const messages = [];
		while (i < html.length && i != -1) {
			if (html[i] == '$' && html[i + 1] == '{' && (++pcount == 1)) {
				// beginning of message
				// Note: This won't throw if (i + 1) is out of bounds
				i += 2;
				start = i;
			} else if (html[i] == '{' && pcount > 0) {
				// regular open brace (only registered when we've started parsing)
				pcount++;
				i++;
			} else if (html[i] == '}' && pcount > 0 && (--pcount == 0)) {
				// if all braces closed, message is fully parsed
				messages.push(html.substring(start, i));
				i = html.indexOf('${', i);
			} else {
				i++;
			}
		}

		return [...new Set(messages)];
	},

	_getScriptFields: function (table) {
		return this._getTranslatableFields(table).filter(f => f.type.startsWith('script'));
	},

	_getHTMLFields: function (table) {
		return this._getTranslatableFields(table).filter(f => f.type.startsWith('html'));
	},

	_getTranslatedFields: function (table) {
		return this._getTranslatableFields(table).filter(f => f.type.startsWith('translated'));
	},

	_getTranslatedJSONFields: function (table) {
		return this._getTranslatableFields(table).filter(f => f.type == 'json_translations');
	},

	_getUXFields: function (table) {
		return this._getTranslatableFields(table).filter(f => f.type == 'json');
	},
	
	/**
	 * @param {string} table
	 * @return {{table: string, name: string, label: string, type: string}[]}
	 */
	_getTranslatableFields: function (table) {
		const jsonFields = sn_scoped_cache.ScopedCacheManager.get('lfp_translatable_fields', table);
		if (jsonFields) {
			return JSON.parse(jsonFields);
		}

		const fields = [];
		const dictionaryGr = new GlideRecord('sys_dictionary');
		dictionaryGr.addQuery('name', 'IN', new GlideTableHierarchy(table).getTables());
		var qc = dictionaryGr.addQuery('internal_type', 'translated_field')
			.addOrCondition('internal_type', 'translated_html')
			.addOrCondition('internal_type', 'translated_text')
			.addOrCondition('internal_type', 'html_template')
			.addOrCondition('internal_type', 'json_translations')
			.addOrCondition('internal_type', 'script')
			.addOrCondition('internal_type', 'script_server')
			.addOrCondition('internal_type', 'script_client')
			.addOrCondition('internal_type', 'script_plain');
			
		if (table.startsWith('sys_ux')) {
			qc.addOrCondition('internal_type', 'json');
		}

		dictionaryGr.orderBy('name');
		dictionaryGr.orderBy('element');
		dictionaryGr.query();
		while (dictionaryGr.next()) {
			fields.push({
				table: dictionaryGr.getValue('name'),
				name: dictionaryGr.getValue('element'),
				label: dictionaryGr.getDisplayValue('column_label'),
				type: dictionaryGr.getValue('internal_type')
			});
		}
		
		sn_scoped_cache.ScopedCacheManager.put('lfp_translatable_fields', table, JSON.stringify(fields));
		return fields;
	},

	_metadataExtForTable: function (table) {
		for (let i = 0; i < this.metadataExts.length; i++) {
			if (this.metadataExts[i].handlesTable(table)) {
				return this.metadataExts[i];
			}
		}
	},

	category: 'localization_framework',
    type: 'MetadataLocalizationProcessor'
});]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>markus.kraus</sys_created_by>
        <sys_created_on>2024-05-27 17:55:58</sys_created_on>
        <sys_id>feb8b32fc3d20610754fbfddd4013118</sys_id>
        <sys_mod_count>161</sys_mod_count>
        <sys_name>MetadataLocalizationProcessor</sys_name>
        <sys_package display_value="Localization Framework+ Scoped Apps" source="x_376096_lfp_apps">2e7fca8fc3924210754fbfddd401310d</sys_package>
        <sys_policy/>
        <sys_scope display_value="Localization Framework+ Scoped Apps">2e7fca8fc3924210754fbfddd401310d</sys_scope>
        <sys_update_name>sys_script_include_feb8b32fc3d20610754fbfddd4013118</sys_update_name>
        <sys_updated_by>kr4uzi@gmail.com</sys_updated_by>
        <sys_updated_on>2025-03-10 14:28:32</sys_updated_on>
    </sys_script_include>
</record_update>
