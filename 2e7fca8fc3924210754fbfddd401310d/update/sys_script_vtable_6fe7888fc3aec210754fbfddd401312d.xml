<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_script_vtable">
    <sys_script_vtable action="INSERT_OR_UPDATE">
        <active>true</active>
        <advanced>true</advanced>
        <cache_isolation_level>SYSTEM</cache_isolation_level>
        <cache_strategy>CACHE_BY_QUERY</cache_strategy>
        <cache_ttl>300</cache_ttl>
        <delete_script><![CDATA[(function executeDelete(v_record) {     // Parameters:     //      v_record - a map of field names and values containing (among others) the     //              sys_id of the record that needs to be deleted on the remote system     //          v_record.<field_name>                  - fields in the remote table GlideRecord     //          v_record.setLastErrorMessage(message)   - signal an error      // Sample code:     //  try {     //      update-external-system;     //      if (there-was-an-error) {     //          var message = ...;     //          v_record.setLastErrorMessage(message);     //      }     //  } catch (ex) {     //      var message = ex.getMessage();     //      v_record.setLastErrorMessage(message);     //  }  })(v_record);]]></delete_script>
        <editable>false</editable>
        <enhanced_capacity>true</enhanced_capacity>
        <flow/>
        <insert_script><![CDATA[(function executeInsert(v_record) {     // Parameters:     //      v_record is a map of field names and values containing the sys_id of the     //              record and the fields that need to be inserted in the record on the     //              remote system (source of data)          //          v_record.<field_name>                   - fields in the remote table GlideRecord     //          v_record.setLastErrorMessage(message)   - signal an error      // Sample code:     //  try {     //      update-external-system;     //      if (there-was-an-error) {     //          var message = ...;     //          v_record.setLastErrorMessage(message);     //      }     //  } catch (ex) {     //      var message = ex.getMessage();     //      v_record.setLastErrorMessage(message);     //  }  })(v_record);]]></insert_script>
        <name>LF+ Scoped Apps - Metadata Insight</name>
        <script><![CDATA[(function executeQuery(v_table, v_query) {

	// insight generation 

	// extract and transform the encoded query which is relevant for the sys_metadata query
	const metadataQuery = v_query.getEncodedQuery().split('^NQ').map(nq => nq.split('^OR').map(or => or.split(/\^(?!\^)/).map(query => {
		if (query.startsWith('sys_id')) {
			return query;
		} else if (query.startsWith('record.')) {
			return query.replace('record.', '');
		} else if (query.startsWith('record=')) {
			return query.replace('record', 'sys_id');
		} else if (query.startsWith('record')) {
			return query.replace('record', '');
		} else if (!query.startsWith('translations')) {
			return query;
		}
	}).filter(x => x).join('^')).filter(x => x).join('^OR')).filter(x => x).join('^NQ');

	const recordThreshold = gs.getProperty('glide.script.vtable.max_rows', '1000');
	if (getRowCount(metadataQuery) > recordThreshold) {
		gs.addErrorMessage(gs.getMessage('more than {0} results found. narrow search and filters for better results.', recordThreshold));
		return;
	}

	const processor = new x_376096_lfp_apps.MetadataLocalizationProcessor();
	const metadataGr = new GlideRecordSecure('sys_metadata');
	metadataGr.addEncodedQuery(metadataQuery);
	metadataGr.query();
	while (metadataGr.next()) {
		const sysId = metadataGr.getUniqueValue();
		const table = metadataGr.getRecordClassName();
		const translationsCount = processor.getTranslatableContent({ 
			sysId: sysId,
			tableName: table,
			sourceLanguage: 'en',
			language: 'en'
		}).getElements().reduce((sum, e) => sum + e.getFields().length, 0);

		v_table.addRow({
			sys_id: sysId,
			record: sysId,
			sys_class_name: table,
			translations: translationsCount
		});
	}

	function getRowCount(encodedQuery) {
		const metadataGa = new GlideAggregate('sys_metadata');
		metadataGa.addEncodedQuery(encodedQuery);
		metadataGa.addAggregate('COUNT');
		metadataGa.query();
		if (metadataGa.next()) {
			return +metadataGa.getAggregate('COUNT');
		}

		return 0;
	}
	
  })(v_table, v_query);]]></script>
        <sys_class_name>sys_script_vtable</sys_class_name>
        <sys_created_by>markus.kraus</sys_created_by>
        <sys_created_on>2024-06-06 19:21:21</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>6fe7888fc3aec210754fbfddd401312d</sys_id>
        <sys_mod_count>7</sys_mod_count>
        <sys_name>LF+ Scoped Apps - Metadata Insight</sys_name>
        <sys_package display_value="Localization Framework+ Scoped Apps" source="x_376096_lfp_apps">2e7fca8fc3924210754fbfddd401310d</sys_package>
        <sys_policy/>
        <sys_scope display_value="Localization Framework+ Scoped Apps">2e7fca8fc3924210754fbfddd401310d</sys_scope>
        <sys_update_name>sys_script_vtable_6fe7888fc3aec210754fbfddd401312d</sys_update_name>
        <sys_updated_by>markus.kraus@intrux.ch</sys_updated_by>
        <sys_updated_on>2025-07-17 19:55:47</sys_updated_on>
        <table>x_376096_lfp_apps_st_metadata_insight</table>
        <update_script><![CDATA[(function executeUpdate(v_record, v_changed_fields) {     // Parameters:     //    v_record - a map of field names and values containing the sys_id of the record     //          v_record.<field_name>                   - fields in the remote table GlideRecord     //          v_record.setLastErrorMessage(message)   - signal an error     //    v_changed_fields - a map of field names and values containing the sys_id of the     //          v_changed_fields.<field_name>           - changed fields in the remote table GlideRecord      // Sample code:     //  try {     //      update-external-system;     //      if (there-was-an-error) {     //          var message = ...;     //          v_record.setLastErrorMessage(message);     //      }     //  } catch (ex) {     //      var message = ex.getMessage();     //      v_record.setLastErrorMessage(message);     //  }  })(v_record, v_changed_fields);]]></update_script>
    </sys_script_vtable>
</record_update>
