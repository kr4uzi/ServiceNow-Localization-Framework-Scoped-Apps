<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_376096_lfp_apps.LFPDocumentationExt</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>Implements extension point x_376096_lfp_apps.LFPDocumentationExt</description>
        <mobile_callable>false</mobile_callable>
        <name>LFPDocumentationExt</name>
        <sandbox_callable>false</sandbox_callable>
        <script><![CDATA[/* global Class, GlideRecord, GlideScopedEvaluator */
/* eslint no-undef: "error" */
var LFPDocumentationExt = Class.create();
LFPDocumentationExt.prototype = {
    initialize: function() {
		const scriptGr = new GlideRecord('clone_cleanup_script');
		scriptGr.addQuery('sys_scope', 'global');
		scriptGr.setLimit(1);
		scriptGr.query();
		if (scriptGr.next()) {
			this.scriptGr = scriptGr;
		} else {
			throw new Error(this.type + ' does not function without an infusable script record');
		}
    },

    createOrUpdateDocumention: function (table, field, language, valueMap) {
		this.scriptGr.script = `
			(function (table, field, language, valueMap) {
				var docGr = new GlideRecord('sys_documentation');
				docGr.addQuery('name', table);
				docGr.addQuery('element', field);
				docGr.addQuery('language', language);
				docGr.setLimit(1);
				docGr.query();

				var fields = Object.keys(valueMap);
				if (fields.length == 0 || fields.every(function(f) { return !valueMap[f]; })) {
					if (docGr.next()) {
						docGr.deleteRecord();
					}
				} else {
					if (!docGr.next()) {
						docGr.initialize();
						docGr.setValue('name', table);
						docGr.setValue('element', field);
						docGr.setValue('language', language);
					}

					for (var attr in valueMap) {
						docGr.setValue(attr, valueMap[attr]);
					}
						
					if (docGr.isNewRecord()) {
						docGr.insert();
					} else {
						docGr.update();
					}
				}
			})(table, field, language, JSON.parse(valueMap));
		`;

		const fields = Object.keys(valueMap);
		new GlideScopedEvaluator().evaluateScript(this.scriptGr, 'script', {
			table: table,
			field: field,
			language: language,
			valueMap: JSON.stringify(valueMap)
		});
	},

    type: 'LFPDocumentationExt'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>markus.kraus</sys_created_by>
        <sys_created_on>2024-05-26 18:48:34</sys_created_on>
        <sys_id>c00753d7c35e8210754fbfddd4013144</sys_id>
        <sys_mod_count>4</sys_mod_count>
        <sys_name>LFPDocumentationExt</sys_name>
        <sys_package display_value="Localization Framework+ Scoped Apps" source="x_376096_lfp_apps">2e7fca8fc3924210754fbfddd401310d</sys_package>
        <sys_policy/>
        <sys_scope display_value="Localization Framework+ Scoped Apps">2e7fca8fc3924210754fbfddd401310d</sys_scope>
        <sys_update_name>sys_script_include_c00753d7c35e8210754fbfddd4013144</sys_update_name>
        <sys_updated_by>kr4uzi@gmail.com</sys_updated_by>
        <sys_updated_on>2025-03-10 12:03:09</sys_updated_on>
    </sys_script_include>
</record_update>
