<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_376096_lfp_apps.TableLocalizationProcessor</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>TableLocalizationProcessor</name>
        <script><![CDATA[/* global gs, global */
/* global Class, GlideRecord, GlideScriptedExtensionPoint */
/* eslint no-undef: "error" */
var TableLocalizationProcessor = Class.create();
TableLocalizationProcessor.prototype = Object.extendsObject(global.LFArtifactProcessorSNC, {
	initialize: function () {
		global.LFArtifactProcessorSNC.prototype.initialize.apply(this, arguments);

		const extensionPoints = new GlideScriptedExtensionPoint().getExtensions('LFPDocumentationExt');
		if (extensionPoints.length) {
			extensionPoints[0].initialize();
			this.ext = extensionPoints[0];
		} else {
			throw new Error(this.type + ' requires a "LFPDocumentationExt" implementation');
		}
	},

    getTranslatableContent: function(params) {
		const builder = new global.LFDocumentContentBuilder('v1', params.language, params.sysId, params.tableName, params);		
		const dbObjectGr = new GlideRecord(params.tableName);
		dbObjectGr.addQuery('sys_id', params.sysId);
		dbObjectGr.setLimit(1);
		dbObjectGr.query();
		if (dbObjectGr.next()) {
			const scope = dbObjectGr.getValue('sys_scope');
			const tableName = dbObjectGr.getValue('name');
			processDocumentation(builder, scope, dbObjectGr, tableName, '');

			const dictGr = new GlideRecord('sys_dictionary');
			dictGr.addQuery('name', dbObjectGr.name);
			dictGr.addNotNullQuery('element');
			dictGr.query();
			while (dictGr.next()) {
				const column = dictGr.getValue('element');
				if (column.startsWith('sys')) continue;

				processDocumentation(builder, scope, dictGr, tableName, column);
			}
		}
		
		return builder.build();

		function processDocumentation(builder, scope, anyGr, table, field) {
			const translatedValues = {};
			const docGr = new GlideRecord('sys_documentation');
			docGr.addQuery('name', table);
			docGr.addQuery('element', field);
			docGr.addQuery('language', builder.sourceLanguage).addOrCondition('language', builder.targetLanguage);
			docGr.setLimit(2);
			docGr.query();
			while (docGr.next()) {
				var language = docGr.getValue('language');
				translatedValues[language] = {
					sys_id: docGr.getUniqueValue(),
					label: docGr.getValue('label'),
					plural: docGr.getValue('plural')
				};

				if (field) {
					// help and hint is only usefull for columns, not table labels
					if (docGr.help) {
						translatedValues[language].help = docGr.getValue('help');
					}

					if (docGr.hint) {
						translatedValues[language].hint = docGr.getValue('hint');
					}
				}
			}

			const source = translatedValues[builder.sourceLanguage];
			const target = translatedValues[builder.targetLanguage];

			// Note: The group name is the technical name of the table / column
			const group = anyGr.getTableName() == 'sys_db_object' ? anyGr.getValue('name') : anyGr.getValue('element');
			['label', 'plural', 'help', 'hint'].forEach(key => {
				if (!(key in source)) {
					// ignore help and hint if they are not set
					return;
				}

				const additionalParameters = {
                    'sysId': source.sys_id,
                    'type': 'documentation_field',
					'scope': scope,
                    'name': key,
                    'table': 'sys_documentation'
                };

				const element = global.LFDocumentContentHelper.createElement(group, docGr.getElement(key).getLabel());
				element.setFields([
					global.LFDocumentContentHelper
						.createField(source[key], (target && target[key]) || '')
						.setAdditionalParameters(additionalParameters)
						.setTextType(global.LFDocumentContentHelper.PLAIN_TEXT_TYPE)
				]);
				builder.processElement(element);
			});
		}
	},

    saveTranslatedContent: function(documentContentObject) {
		// the default save function is currently not handling sys_documentation fields at all...
		// the script below is based on LFReadSaveScriptUtils::saveTranslationsInStandardTables
		const targetLanguage = documentContentObject.getLanguage();
        const version = documentContentObject.getVersion();
        if (version == 'v1' && targetLanguage) {
			const elements = documentContentObject.getElements();
			const docFields = {};
            for (let i = 0; i < elements.length; i++) {
				const fields = elements[i].getFields();
				for (let j = 0; j < fields.length; j++) {
					const field = fields[j];
					const additionalParameters = field.getAdditionalParameters() || {};
					if (additionalParameters.type == 'documentation_field' && additionalParameters.sysId && additionalParameters.name) {
						const docField = docFields[additionalParameters.sysId] || (docFields[additionalParameters.sysId] = {});
						docField[additionalParameters.name] = field.getTranslatedValue();
					}
				}
            }

			const updateSetManager = new global.LFUpdateSetManager(this.publishMode, this.updateSetSuffix);
			const docGr = new GlideRecord('sys_documentation');
			docGr.addQuery('sys_id', 'IN', Object.keys(docFields));
			docGr.query();
			while (docGr.next()) {
				updateSetManager.switchToUpdateSetInScope(docGr.getValue('sys_scope'));
				this.ext.createOrUpdateDocumention(docGr.getValue('name'), docGr.getValue('element'), targetLanguage, docFields[docGr.getUniqueValue()]);
				updateSetManager.switchToPreviousUpdateSet();
			}
        }
	},

	category: 'localization_framework',
    type: 'TableLocalizationProcessor'
});]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>markus.kraus</sys_created_by>
        <sys_created_on>2024-05-25 21:54:18</sys_created_on>
        <sys_id>719f42cfc3924210754fbfddd401310a</sys_id>
        <sys_mod_count>9</sys_mod_count>
        <sys_name>TableLocalizationProcessor</sys_name>
        <sys_package display_value="Localization Framework+ Scoped Apps" source="x_376096_lfp_apps">2e7fca8fc3924210754fbfddd401310d</sys_package>
        <sys_policy/>
        <sys_scope display_value="Localization Framework+ Scoped Apps">2e7fca8fc3924210754fbfddd401310d</sys_scope>
        <sys_update_name>sys_script_include_719f42cfc3924210754fbfddd401310a</sys_update_name>
        <sys_updated_by>markus.kraus</sys_updated_by>
        <sys_updated_on>2024-05-26 18:50:10</sys_updated_on>
    </sys_script_include>
</record_update>
