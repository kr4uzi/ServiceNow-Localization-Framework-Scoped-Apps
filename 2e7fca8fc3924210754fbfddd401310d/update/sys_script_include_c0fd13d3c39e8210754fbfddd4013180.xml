<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_376096_lfp_apps.LFPMetadataExt</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>Implements extension point x_376096_lfp_apps.LFPMetadataExt</description>
        <name>LFPMetadataExt</name>
        <script><![CDATA[/* global Class, GlideRecord, GlideScopedEvaluator */
/* eslint no-undef: "error" */
var LFPMetadataExt = Class.create();
LFPMetadataExt.prototype = {
    initialize: function() {
		const scriptGr = new GlideRecord('sys_rte_eb_script_operation');
		scriptGr.addQuery('sys_id', '80e292c3c3d24210754fbfddd40131f2');
		scriptGr.setLimit(1);
		scriptGr.query();
		if (scriptGr.next()) {
			this.scriptGr = scriptGr;
		} else {
			throw new Error(this.type + ' does not function without script injection');
		}

		this._tableCache = {};
    },

    handlesTable: function (table) {
		if (table in this._tableCache) {
			return true;
		}

		const dbObjectGr = new GlideRecord('sys_db_object');
		dbObjectGr.addQuery('name', table);
		dbObjectGr.setLimit(1);
		dbObjectGr.query();
		if (dbObjectGr.next()) {
			this._tableCache[table] = dbObjectGr.getValue('sys_scope');
			return true;
		}

		return false;
	},

	getFieldValues: function (table, sysId, fields) {
		this.scriptGr.sys_scope = this._tableCache[table];
		this.scriptGr.script = `
			(function (table, sysId, fields) {

				var recordGr = new GlideRecord(table);
				recordGr.addQuery('sys_id', sysId);
				recordGr.setLimit(1);
				recordGr.query();
				if (recordGr.next()) {
					var values = {};
					fields.forEach(function (field) {
						values[field] = recordGr.getValue(field);
					});

					return values;
				}

			})(table, sysId, JSON.parse(fields));
		`;

		return new GlideScopedEvaluator().evaluateScript(this.scriptGr, 'script', {
			table: table,
			sysId: sysId,
			fields: JSON.stringify(fields)
		});
	},

    type: 'LFPMetadataExt'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>markus.kraus</sys_created_by>
        <sys_created_on>2024-05-26 19:18:53</sys_created_on>
        <sys_id>c0fd13d3c39e8210754fbfddd4013180</sys_id>
        <sys_mod_count>3</sys_mod_count>
        <sys_name>LFPMetadataExt</sys_name>
        <sys_package display_value="Localization Framework+ Scoped Apps" source="x_376096_lfp_apps">2e7fca8fc3924210754fbfddd401310d</sys_package>
        <sys_policy/>
        <sys_scope display_value="Localization Framework+ Scoped Apps">2e7fca8fc3924210754fbfddd401310d</sys_scope>
        <sys_update_name>sys_script_include_c0fd13d3c39e8210754fbfddd4013180</sys_update_name>
        <sys_updated_by>markus.kraus</sys_updated_by>
        <sys_updated_on>2024-05-27 19:50:28</sys_updated_on>
    </sys_script_include>
</record_update>
